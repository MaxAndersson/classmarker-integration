service: certification

frameworkVersion: ">=1.2.0 <2.0.0"

custom:
  stage: "${opt:stage, self:provider.stage}"
  kmsKeyArn: ${file(env.yml):${self:custom.stage}.KEY_ARN}  

provider:
  name: aws
  runtime: python3.6
  timeout: 180
  environment: ${file(env.yml):${self:custom.stage}}
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:PutObject
      Resource: "arn:aws:s3:::training-certificates.neo4j.com/*"
    - Effect: Allow
      Action:
        - KMS:Decrypt
      Resource:
        - ${self:custom.kmsKeyArn}

plugins:
  - serverless-python-requirements

functions:
  generate-certificate:
      name: GenerateCertificate
      handler: handler.generate_certificate
      role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
      events:
        - http: POST generateCertificate
  get-email:
      name: Auth0GetEmailFromUid
      handler: handler.get_email_lambda
      role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
      events:
        - http: POST Auth0GetEmailFromUid

package:
  exclude:
    - a/**
