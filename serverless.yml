service: certification

frameworkVersion: ">=1.2.0 <2.0.0"

custom:
  stage: "${opt:stage, self:provider.stage}"
  kmsKeyArn: ${file(env.yml):${self:custom.stage}.KEY_ARN}
  CertificatesTopic:
    Fn::Join:
      - ":"
      - - arn
        - aws
        - sns
        - Ref: AWS::Region
        - Ref: AWS::AccountId
        - CertificatesToEmail

provider:
  name: aws
  runtime: python3.6
  timeout: 180
  environment: ${file(env.yml):${self:custom.stage}}
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:PutObject
      Resource: "arn:aws:s3:::training-certificates.neo4j.com/*"
    - Effect: Allow
      Action:
        - KMS:Decrypt
      Resource:
        - ${self:custom.kmsKeyArn}
    - Effect: 'Allow'
      Action:
        - "sns:Publish"
      Resource:
        - ${self:custom.CertificatesTopic}
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "arn:aws:ses:us-east-1:128916679330:identity/neo4j.com"

plugins:
  - serverless-python-requirements

functions:
  generate-certificate:
      name: GenerateCertificate
      handler: handler.generate_certificate
      events:
        - http: POST generateCertificate
  send-email:
      name: SendEmail
      handler: handler.send_email
      events:
        - sns:
            topicName: CertificatesToEmail
            displayName: Topic to email certificates

package:
  exclude:
    - node_modules/**
    - a/**
